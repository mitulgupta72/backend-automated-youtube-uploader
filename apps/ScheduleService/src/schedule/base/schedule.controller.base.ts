/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScheduleService } from "../schedule.service";
import { ScheduleCreateInput } from "./ScheduleCreateInput";
import { Schedule } from "./Schedule";
import { ScheduleFindManyArgs } from "./ScheduleFindManyArgs";
import { ScheduleWhereUniqueInput } from "./ScheduleWhereUniqueInput";
import { ScheduleUpdateInput } from "./ScheduleUpdateInput";

export class ScheduleControllerBase {
  constructor(protected readonly service: ScheduleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Schedule })
  async createSchedule(
    @common.Body() data: ScheduleCreateInput
  ): Promise<Schedule> {
    return await this.service.createSchedule({
      data: {
        ...data,

        video: data.video
          ? {
              connect: data.video,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        scheduledTime: true,
        status: true,
        updatedAt: true,

        video: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Schedule] })
  @ApiNestedQuery(ScheduleFindManyArgs)
  async schedules(@common.Req() request: Request): Promise<Schedule[]> {
    const args = plainToClass(ScheduleFindManyArgs, request.query);
    return this.service.schedules({
      ...args,
      select: {
        createdAt: true,
        id: true,
        scheduledTime: true,
        status: true,
        updatedAt: true,

        video: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Schedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async schedule(
    @common.Param() params: ScheduleWhereUniqueInput
  ): Promise<Schedule | null> {
    const result = await this.service.schedule({
      where: params,
      select: {
        createdAt: true,
        id: true,
        scheduledTime: true,
        status: true,
        updatedAt: true,

        video: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Schedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSchedule(
    @common.Param() params: ScheduleWhereUniqueInput,
    @common.Body() data: ScheduleUpdateInput
  ): Promise<Schedule | null> {
    try {
      return await this.service.updateSchedule({
        where: params,
        data: {
          ...data,

          video: data.video
            ? {
                connect: data.video,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          scheduledTime: true,
          status: true,
          updatedAt: true,

          video: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Schedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSchedule(
    @common.Param() params: ScheduleWhereUniqueInput
  ): Promise<Schedule | null> {
    try {
      return await this.service.deleteSchedule({
        where: params,
        select: {
          createdAt: true,
          id: true,
          scheduledTime: true,
          status: true,
          updatedAt: true,

          video: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
